import functools

from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from telegram import Bot, Update, ParseMode
import logging

import scrapper
from keyboards import get_paginator_keyboard, get_sites_keyboard, get_retry_keyboard
from config import TOKEN
from scrapper import urls


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

def start(update : Update, context : CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –±–æ—Ç–µ –ø–æ–∏—Å–∫–∞ —Å–∫–∏–¥–æ–∫!ü§ë\n"
                                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã: {' '.join(urls.keys())} \n"
                                    f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–∏–¥–æ–∫ - /discount\n"
                                    "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç? - /help"
                             )

def discount(update : Update, context : CallbackContext):
    user_data = context.user_data
    logging.info("trying delete 10 messages after going to main menu")
    try:
        # –£–¥–∞–ª—è–µ–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è paginator'a
        for i in range(10):
            context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=user_data['message_ids']['message_ids'][i]
            )
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è reply_markup
        context.bot.delete_message(update.effective_chat.id, user_data['message_ids']['last_message_id'])
        logging.info("user_data['message_ids'] is defined")
    except:
        logging.info("user_data['message_ids'] already deleted")
        pass

    sites = list(urls.keys())
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –¥–µ–Ω–µ–≥!ü§ë\n"
                                  f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã: {' '.join(urls.keys())}\n. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–∏–¥–æ–∫, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                             reply_markup = get_sites_keyboard(sites)
                             )

def help(update : Update, context : CallbackContext):
    context.bot.send_message(
        chat_id = update.effective_chat.id,
        text = "<b>–û –±–æ—Ç–µ:</b>\n"
               " <b><i>DiscountBot</i></b> - —ç—Ç–æ –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∏–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –æ–¥–µ–∂–¥—ã. –í—ã–≤–æ–¥–∏—Ç –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∏—Ö. \n\n"
               "<b>/discount</b> - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞. –ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö. –¢–∞–∫ –∫–∞–∫ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ, —É –±–æ—Ç–∞ –µ—Å—Ç—å —É–¥–æ–±–Ω—ã–π paginator"
               ", c –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ª–∏—Å—Ç–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑ —Å–∞–π—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –≤–µ–±-—Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞, "
               "–≤—Å–µ —Ü–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞."
        ,
        parse_mode = ParseMode.HTML
    )

def send_list_content(update : Update, context : CallbackContext, site):
    content = scrapper.scrap(site)

    if len(content['content_list']) == 0:
        context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = "–°–æ—Ä–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Å–∫—Ä–∞–ø–∏—Ç—å —Å —Å–∞–π—Ç–∞ asos.com –∏–∑ –∑–∞ –∏—Ö –±–ª–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, —Å–∫—Ä–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1-2 –ø–æ–ø—ã—Ç–∫–∏.",
            reply_markup = get_retry_keyboard()
        )
    else:
        user_data = context.user_data

        logging.info(f"scrapper found {len(content['content_list'])} products in file content")

        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f'–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º: {content["content_title"]}. '
                                      f'–í—ã –º–æ–∂–µ—Ç–µ –ª–∏—Å—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã')

        user_data['page'] = 1
        user_data['content'] = content

        message_ids  = {'last_message_id': None, 'message_ids' : []}
        cnt = 0
        for product in content["content_list"][0 : 10]:
            cnt += 1
            message_ids['message_ids'].append(
                context.bot.send_message(
                    chat_id = update.effective_chat.id,
                    text=f'{product["title"]}\n'
                         f'<s>{product["old_price"]}</s>. –ù–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{product["new_price"]}</b>\n'
                         f'{product["link"]}',
                    parse_mode = ParseMode.HTML

                ).message_id
            )

        message_ids['last_message_id'] = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ {user_data["page"]}',
            reply_markup = get_paginator_keyboard(1, len(content['content_list']) // 10)
        ).message_id

        user_data['message_ids'] = message_ids

def paginator(update : Update, context : CallbackContext):
    user_data = context.user_data

    content = user_data['content']
    page = user_data['page']
    chat_id = update.effective_chat.id
    count_pages = len(content["content_list"])
    max_pages = count_pages // 10
    message_ids = user_data['message_ids']
    for i in range(10):
        product_info = content["content_list"][page * 10 + i]
        context.bot.edit_message_text(
            text = f'{product_info["title"]}\n'
                   f'<s>{product_info["old_price"]}</s>. –ù–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{product_info["new_price"]}</b>\n'
                   f'{product_info["link"]}\n',
            chat_id = chat_id,
            message_id = message_ids['message_ids'][i],
            parse_mode = ParseMode.HTML
        )

    context.bot.edit_message_text(
        text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ {page}',
        chat_id=chat_id,
        message_id=user_data['message_ids']['last_message_id']
    )

    context.bot.edit_message_reply_markup(
        reply_markup = get_paginator_keyboard(page, max_pages),
        chat_id = chat_id,
        message_id = user_data['message_ids']['last_message_id']
    )

#TODO: 1) –°–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏(—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏)  DONE

def keyboard_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    if data.startswith('paginator'):
        return paginator_keyboard_handler(update, context, data)
    elif data.startswith('choose_site'):
        return discount_keyboard_handler(update, context, data)
    elif data == 'retry_asos':
        return send_list_content(update, context, "asos")

def paginator_keyboard_handler(update : Update, context : CallbackContext, data):
    if data == "paginator_next":
        context.user_data['page'] += 1
        return paginator(update, context)
    elif data == "paginator_prev":
        if (context.user_data['page'] == 1):
            print("–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–π—Ç–∏ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            return paginator(update, context)
        context.user_data['page'] -= 1
        return paginator(update, context)
    elif data == "paginator_back":
        return discount(update, context)

def discount_keyboard_handler(update : Update, context : CallbackContext, data):
    if data == "choose_site_asos":
        return send_list_content(update, context, "asos")
    elif data == "choose_site_lamoda":
        return send_list_content(update, context, "lamoda")

def main():
    bot = Bot(token = TOKEN)
    updater = Updater(bot = bot, use_context = True)

    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("discount", discount))
    dispatcher.add_handler(CommandHandler("help", help))
    dispatcher.add_handler(CallbackQueryHandler(callback=keyboard_handler))


    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
